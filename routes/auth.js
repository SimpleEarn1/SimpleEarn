const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const { v4: uuidv4 } = require('uuid'); // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è referralCode

// üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
router.post('/register', async (req, res) => {
  try {
    const { nickname, email, password, referralCode } = req.body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π email
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: 'Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è' });
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(password, 10);

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser = new User({
      nickname,
      email,
      password: hashedPassword,
      referralCode: uuidv4().slice(0, 8) // —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
    });

    // –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω —á—É–∂–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º referrer
    if (referralCode) {
      const referrer = await User.findOne({ referralCode });
      if (referrer) {
        newUser.referrer = referrer._id;

        // üîÅ –ú–æ–∂–Ω–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É:
        // referrer.balance += 10;
        // await referrer.save();
      }
    }

    await newUser.save();

    res.status(201).json({ message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// üîë –í—Ö–æ–¥
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });

    const token = jwt.sign({ userId: user._id }, 'secretkey', { expiresIn: '7d' });

    res.json({
      token,
      user: {
        id: user._id,
        nickname: user.nickname,
        email: user.email,
        referralCode: user.referralCode,
        referrer: user.referrer,
        balance: user.balance
      }
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' });
  }
});

module.exports = router;